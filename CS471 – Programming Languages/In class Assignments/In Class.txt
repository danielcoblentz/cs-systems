Chapter 3: Describing Syntax and Semantics

====
Due: To be announced in class. No grace period. No late submission is accepted.
points: 25 points 
Turn in a hard copy or submit your work to the Bb, one submission per group.
====

1. Here's an example of a grammar for a Small Programming Language:

	<program> -> begin <stmtList> end
	<stmtList> -> <stmt> | <stmt>; <stmtList>
	<stmt> -> <var> := <expression>
	<var> -> A | B | C | D
	<expression> -> <var> + <var> | <var> - <var>| <var>

Find a derivation or parse tree that will generate the following program:
	
	begin
		B := C;
		A := B - D
	end


2. Consider the following grammar:
<S> →   <A> a <B> b
<A> →   <A> b | b
<B> →   a <B> | a

Which of the following sentences are in the language generated by this grammar?
a) baab 
b) bbbab 
c) bbaaaaa 
d) bbaab

3. Write a BNF grammar for the language of palindromes.
Examples (spaces don't count!):
(1) aba 	(2) pop 	(3) pop a pop	(4) elu par cette crapule	(5) a man a plan a canal panama 



4. (Skip this for inclass) Here is an informal description of a simple language. Statements in the language are as follows
read a			a: variable read an integer into the variable 
a = a+1			Add 1 to a. 
b = b-1			Subtract 1 from b
if a > 0 goto L		If a > 0, transfer control to statement labeled with L
goto L			Transfer control to statement labeled with L
halt			Stop execution. 

a and b represent names of integer variables and they can be any low-case letter.  L represents 
a name of a label and can be any upper-case letter. Each statement may have a label as a prefix, 
separated from the statement by a colon (:). A program must have at least one statement and 
ends with halt. 

For example, the following program computes the sum of two positive integers a + b
Preconditions: Variables a and b contain positive integers
Postconditions: Variable a contains the sum of the integers, the contents of variable b
		 is destroyed.
read a
read b
L: a = a+1     
   b = b-1     
   if b > 0 goto L     
halt 

Task: Develop a formal definition of the language syntax using BNF notation. 


5. Rewrite the BNF of Example 3.4 (copied below) to give + precedence over * and force + to be right associative.

Example 3.4 An Unambiguous Grammar for Expressions

<assign> → <id> = <expr>
<id> →   A | B | C
<expr> →   <expr> + <term>
	| <term>
<term> →   <term> * <factor>
	| <factor>
<factor> →   ( <expr> )
	| <id>


6. Prove that the following grammar is ambiguous: 
<S> ->   <A>
<A> ->   <A> + <A> | <id>
<id> ->   a | b | c

